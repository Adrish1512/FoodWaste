{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth services\nexport const authService = {\n  login: async (email, password) => {\n    // Simulate frontend-only login\n    if (!email || !password) {\n      throw {\n        response: {\n          data: {\n            message: 'Email and password are required'\n          }\n        }\n      };\n    }\n    // For demo, treat any email/password as valid\n    let user = {\n      email,\n      role: email.includes('ngo') ? 'ngo' : 'restaurant',\n      name: 'Demo User'\n    };\n    const token = 'mock-token';\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      token,\n      user\n    };\n  },\n  register: async userData => {\n    // Simulate frontend-only registration\n    if (!userData.email || !userData.password) {\n      throw {\n        response: {\n          data: {\n            message: 'Email and password are required'\n          }\n        }\n      };\n    }\n    let user = {\n      ...userData,\n      role: userData.role || 'restaurant',\n      name: userData.name || 'Demo User'\n    };\n    const token = 'mock-token';\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      token,\n      user\n    };\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n};\n\n// Donation services\nexport const donationService = {\n  getAllDonations: async () => {\n    const response = await api.get('/donations');\n    return response.data;\n  },\n  getDonationById: async id => {\n    const response = await api.get(`/donations/${id}`);\n    return response.data;\n  },\n  createDonation: async donationData => {\n    const response = await api.post('/donations', donationData);\n    return response.data;\n  },\n  updateDonation: async (id, updateData) => {\n    const response = await api.patch(`/donations/${id}`, updateData);\n    return response.data;\n  }\n};\n\n// Profile services\nexport const profileService = {\n  getProfile: async () => {\n    const response = await api.get('/profile');\n    return response.data;\n  },\n  updateProfile: async profileData => {\n    const response = await api.patch('/profile', profileData);\n    return response.data;\n  }\n};\n\n// Contact services\nexport const contactService = {\n  sendContact: async contactData => {\n    const response = await api.post('/contact', contactData);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","authService","login","email","password","response","data","message","user","role","includes","name","setItem","JSON","stringify","register","userData","logout","removeItem","getCurrentUser","parse","donationService","getAllDonations","get","getDonationById","id","createDonation","donationData","post","updateDonation","updateData","patch","profileService","getProfile","updateProfile","profileData","contactService","sendContact","contactData"],"sources":["C:/Users/proba/OneDrive/Desktop/foodWasteManagement/zerowaste-connect/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth services\r\nexport const authService = {\r\n  login: async (email, password) => {\r\n    // Simulate frontend-only login\r\n    if (!email || !password) {\r\n      throw { response: { data: { message: 'Email and password are required' } } };\r\n    }\r\n    // For demo, treat any email/password as valid\r\n    let user = { email, role: email.includes('ngo') ? 'ngo' : 'restaurant', name: 'Demo User' };\r\n    const token = 'mock-token';\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return { token, user };\r\n  },\r\n\r\n  register: async (userData) => {\r\n    // Simulate frontend-only registration\r\n    if (!userData.email || !userData.password) {\r\n      throw { response: { data: { message: 'Email and password are required' } } };\r\n    }\r\n    let user = { ...userData, role: userData.role || 'restaurant', name: userData.name || 'Demo User' };\r\n    const token = 'mock-token';\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return { token, user };\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n};\r\n\r\n// Donation services\r\nexport const donationService = {\r\n  getAllDonations: async () => {\r\n    const response = await api.get('/donations');\r\n    return response.data;\r\n  },\r\n\r\n  getDonationById: async (id) => {\r\n    const response = await api.get(`/donations/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createDonation: async (donationData) => {\r\n    const response = await api.post('/donations', donationData);\r\n    return response.data;\r\n  },\r\n\r\n  updateDonation: async (id, updateData) => {\r\n    const response = await api.patch(`/donations/${id}`, updateData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Profile services\r\nexport const profileService = {\r\n  getProfile: async () => {\r\n    const response = await api.get('/profile');\r\n    return response.data;\r\n  },\r\n\r\n  updateProfile: async (profileData) => {\r\n    const response = await api.patch('/profile', profileData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Contact services\r\nexport const contactService = {\r\n  sendContact: async (contactData) => {\r\n    const response = await api.post('/contact', contactData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}